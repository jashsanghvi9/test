# (c) 2018 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This AWS Content
# is provided subject to the terms of the AWS Customer Agreement available at
# https://aws.amazon.com/agreement/ or other written agreement between Customer
# and Amazon Web Services, Inc.
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Top Logs Groups based on Incoming Bytes'

###
### CloudFormation Interface Metadata
###

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Details for Lambda Function
      Parameters:
      - pNotificationEmail
      - pDays
      - pTopLogGroup
      - pScheduler
    ParameterLabels:
      pLambdaZipBucket:
        default: S3 Bucket
      pLambdaZipKey:
        default: S3 Key
      pNotificationEmail:
        default: Notification email
      pDays:
        default: Number of days
      pTopLogGroup:
        default: Number of top Log Groups
      pScheduler:
        default: Schedule

###
#### Template input parameters
####

Parameters:
  pNotificationEmail:
    Type: String
    Default: example@example.com
    Description: Email address to send top Log Groups
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"
  pDays:
    Type: Number
    Default: 7
    Description: Number of days the script should look back for data.
  pTopLogGroup:
    Type: Number
    Default: 5
    Description: Number of top Log Groups to be displayed.
  pScheduler:
    Type: String
    Default: "cron(0 8 1 * ? *)"
    Description: Create a Schedule Expression to trigger the Lambda Function.

# Template Resources

Resources:
  # Lambda Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchLogsPermissions
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: LambdaFunctionPermissionsforSNSPublish
                Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref 'NotifyTopicSNS'
              - Sid: LambdaFunctionPermissionsforCloudWatch
                Effect: Allow
                Action:
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:GetMetricStatistics"
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  ####
  #### Lambda Function
  ####

  LambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn: LambdaRole
    Properties:
      FunctionName: !Sub ${AWS::StackName}-LambdaFunction
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          sns_topic_arn: !Ref 'NotifyTopicSNS'
          top: !Ref 'pTopLogGroup'
          number_of_days: !Ref 'pDays'
      Handler: index.lambda_handler
      Timeout: 300
      Runtime: python2.7
      CodeUri: s3://toploggroup/TopLogGroups.zip
      Events:
          ScheduledEvent:
            Type: Schedule
            Properties:
              Schedule: !Ref 'pScheduler'

  # Notification SNS topic
  NotifyTopicSNS:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint: !Ref pNotificationEmail
            Protocol: email